bot_token = "TOEKN"

import discord
import pygame
import asyncio
import datetime
import time
import threading
import random
import pickle
import os
import requests
import html
import os
os.system("title Vortex-Trivia")

pygame.init()
client = discord.Client()

class Assets:
    questionfont         = pygame.font.Font("Amiko-Bold.ttf", 65)
    answerfont           = pygame.font.Font("Amiko-Bold.ttf", 50)
    answerend            = pygame.image.load("AnswerEnd.png")
    answermiddle         = pygame.image.load("AnswerMiddle.png")
    fontcolor            = 50,50,60
    playersymbol         = pygame.image.load("PlayerSymbol.png")
    playerfont           = pygame.font.Font("Amiko-Bold.ttf", 70)
    correctanswerend     = pygame.image.load("CorrectAnswerEnd.png")
    correctanswermiddle  = pygame.image.load("CorrectAnswerMiddle.png")
    wronganswerend       = pygame.image.load("WrongAnswerEnd.png")
    wronganswermiddle    = pygame.image.load("WrongAnswerMiddle.png")
    answercountfont      = pygame.font.Font("Amiko-Bold.ttf", 50)

Assets.answerstart = pygame.transform.flip(Assets.answerend, True, False)
Assets.correctanswerstart = pygame.transform.flip(Assets.correctanswerend, True, False)
Assets.wronganswerstart = pygame.transform.flip(Assets.wronganswerend, True, False)



class Question(Assets):
    

    def __init__(self, question, answers, correct, questionnumber):
        self.question = question
        self.answers = answers
        self.correct = correct
        self.questionnumber = questionnumber
        self.messageID = "ID"
        self.reactions = {
                     u"1\u20e3": [],
                     u"2\u20e3": [],
                     u"3\u20e3": []
                    }
        self.savage = False
        self.brutal = False

    def renderQuestion(self):
        question = self.question.split()
        lines = []
        currentLine = ""
        wordcount = 0
        for i in question:
            wordcount += 1
            appended = False
            if len(currentLine)+len(i)+1 < 30:
                currentLine += i+" "
            else:
                appended = True
                lines.append(currentLine[:-1])
                currentLine = i+" "

            if wordcount == len(question) and ((lines and lines[-1][-len(i)+1:] != i) or not appended):
                lines.append(currentLine[:-1])
            

        print(lines)
        rendersize = 1090, 1355#1937, 1355
        surface = pygame.Surface(rendersize)
        surface.fill((255,255,255))

        for line in lines:
            render = self.questionfont.render(line, True, self.fontcolor)
            surface.blit(render, render.get_rect(center=(rendersize[0]/2, 500-40*len(lines)+80*lines.index(line))))
        
        for answer in range(3):
            height = 780+180*answer
            surface.blit(self.answerstart, (40, height))
            circlesize = self.answoo
            erstart.get_size()
            for i in range(rendersize[0]-80-circlesize[0]*2):
                surface.blit(self.answermiddle, (40+circlesize[0]+i, height))
            surface.blit(self.answerend, (rendersize[0]-40-circlesize[0], height))

            render = self.answerfont.render(self.answers[answer], True, self.fontcolor)
            surface.blit(render, render.get_rect(centery=height+circlesize[1]/2*1.05, left=100))

        playersymbol = surface.blit(self.playersymbol, (50,60))
        render = self.playerfont.render(str(len([x for x in currentGame["Players"] if currentGame["Players"][x]])), True, (206,206,216))
        surface.blit(render, render.get_rect(centery=playersymbol.centery, left=playersymbol.right+20))

        pygame.image.save(surface, "temp/Question%s.jpg"%self.questionnumber)



    def renderAnswer(self):
        question = self.question.split()
        lines = []
        currentLine = ""
        wordcount = 0
        for i in question:
            wordcount += 1
            appended = False
            if len(currentLine)+len(i)+1 < 30:
                currentLine += i+" "
            else:
                appended = True
                lines.append(currentLine[:-1])
                currentLine = i+" "

            if wordcount == len(question) and ((lines and lines[-1][-len(i)+1:] != i) or not appended):
                lines.append(currentLine[:-1])
            

        print(lines)
        rendersize = 1090, 1355
        surface = pygame.Surface(rendersize)
        surface.fill((255,255,255))

        for line in lines:
            render = self.questionfont.render(line, True, self.fontcolor)
            surface.blit(render, render.get_rect(center=(rendersize[0]/2, 500-40*len(lines)+80*lines.index(line))))

        playercount = sum([len(self.reactions[x]) for x in self.reactions])
        if playercount:
            percents = [len(self.reactions[x])/playercount for x in self.reactions]
        else:
            percents = 0,0,0

        if min(percents) == percents[self.correct-1] and percents.count(min(percents)) < 3:
            self.savage = True
            self.brutal = True

        if percents[self.correct-1] != max(percents):
            self.brutal = True


        for answer in range(3):
            height = 780+180*answer
            surface.blit(self.answerstart, (40, height))
            circlesize = self.answerstart.get_size()
            
            for i in range(rendersize[0]-80-circlesize[0]*2):
                surface.blit(self.answermiddle, (40+circlesize[0]+i, height))
            surface.blit(self.answerend, (rendersize[0]-40-circlesize[0], height))


            width = round((rendersize[0]-80-circlesize[0]*2)*percents[answer])
            if self.correct == answer+1:
                
                surface.blit(self.correctanswerstart, (40, height))
                circlesize = self.correctanswerstart.get_size()
                for i in range(width):
                    surface.blit(self.correctanswermiddle, (40+circlesize[0]+i, height))
                surface.blit(self.correctanswerend, (40+circlesize[0]+width, height))


            elif width:
                surface.blit(self.wronganswerstart, (40, height))
                circlesize = self.wronganswerstart.get_size()
                for i in range(width):
                    surface.blit(self.wronganswermiddle, (40+circlesize[0]+i,
